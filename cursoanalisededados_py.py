# -*- coding: utf-8 -*-
"""CursoAnaliseDeDados.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QuG6jQ0lllb0Vlr5GfBWr1seAzv3t7Xx
"""

import pandas as pd

dfClientes = pd.read_excel('caso_estudo.xlsx', sheet_name='clientes')
dfLojas = pd.read_excel('caso_estudo.xlsx', sheet_name='lojas')
dfProdutos = pd.read_excel('caso_estudo.xlsx', sheet_name='produtos')
dfVendas = pd.read_excel('caso_estudo.xlsx', sheet_name='vendas')
dfPagamentos = pd.read_excel('caso_estudo.xlsx', sheet_name='pagamentos')

"""**Analise** **Preliminar**"""

dfClientes.sample(5) #sample: dados aleatorios/ head: os primeiros dados/ tail: ultimos dados

dfClientes.isnull().sum() #Somando os dados nulo

dfClientes[dfClientes.isnull().T.any()] #Registros que possuem algum dado nulo

dfClientes.sexo.unique()

dfProdutos.boxplot(column=['valor']) #Identificando um valor muito alto na tabela

dfProdutos[dfProdutos.valor>3000000] #Encontrando o valor na tabela

dfVendas[dfVendas.id_produto==10].count() #Identificando quantas vendas tem esse produto

dfVendas.describe() #Verificando se possui alguma venda errada

dfPagamentos.describe() #Verificando se possui algum pagamento errado

"""**DATA** **CLEANNING**

"""

#Dados Nulos
dfClientes.loc[dfClientes.nome.isnull(), 'nome'] = 'Sem Nome'   #O comando .loc acessa o registro dado uma linha e uma coluna, bom para quando se quer fazer uma alteração no registro
dfClientes.loc[dfClientes.sexo.isnull(), 'sexo'] = 'O'
dfClientes.loc[dfClientes.dt_nasc.isnull(), 'dt_nasc'] = '1/1/2021'

dfClientes.loc[[269,287], :]

#Buscando Outliers
dfProdutos.loc[9, 'valor'] = dfProdutos.valor[9]/10000 #Substituindo o valor do numero no registro. Dividindo por 10.000

dfProdutos

dfProdutos.boxplot(column=['valor'])

#Inconsistencia
dfVendas[~dfVendas.id_cliente.isin(dfClientes.id)].count() #Verificando se os id estao na coluna cliente, usando isin

dfVendas[~dfVendas.id_loja.isin(dfLojas.id)].count()

dfVendas[~dfVendas.id_produto.isin(dfProdutos.id)].count()

dfPagamentos[~dfPagamentos.id_venda.isin(dfVendas.id)].count()

dfVendas[~dfVendas.id.isin(dfPagamentos.id_venda)].count() #Procurando as vendas que nao geraram pagamento

#Dados Duplicados
dfClientes[dfClientes.nome.duplicated()] #Verificando se possui nomes duplicados

dfClientes[dfClientes.nome=='Anna Melo']

dfClientes.drop('id', axis=1).duplicated().sum() #Retirando a tabela id do data frame Clientes

dfProdutos.produto.duplicated().sum()

dfLojas.cidade.duplicated().sum()

dfVendas[dfVendas.drop('id', axis=1).duplicated()]

dfVendas[(dfVendas.id_cliente==559) & (dfVendas.id_produto==5)]

dfPagamentos.drop('id',axis=1).duplicated().sum()

#Tratando o formato de data
dfClientes.dt_nasc = pd.to_datetime(dfClientes.dt_nasc, format='%m/%d/%Y')

dfClientes

#Indexes
dfClientes = dfClientes.set_index('id') #Substituindo a coluna id pela coluna index

dfClientes

dfClientes.index

dfLojas = dfLojas.set_index('id')
dfProdutos = dfProdutos.set_index('id')
dfVendas = dfVendas.set_index('id')
dfPagamentos = dfPagamentos.set_index('id')

dfVendas.index

"""**Data** **Fusion**


"""

dfGeral = dfVendas.join(dfClientes.add_prefix('cliente_'), on="id_cliente") #Dentro do meu data frame vendas, existe uma coluna id_cliente que sera conectada ao meu data frame clientes
dfGeral = dfGeral.join(dfLojas.add_prefix('lojas_'), on='id_loja')
dfGeral = dfGeral.join(dfProdutos.add_prefix('produto_'), on='id_produto')

dfGeral

dfGeral = dfGeral.join(dfPagamentos.set_index('id_venda'))

dfGeral

dfGeral.isnull().sum()